{"version":3,"sources":["../node_modules/react-apollo/react-apollo.esm.js"],"names":["__webpack_require__","d","__webpack_exports__","Query","react__WEBPACK_IMPORTED_MODULE_0__","prop_types__WEBPACK_IMPORTED_MODULE_1__","ts_invariant__WEBPACK_IMPORTED_MODULE_2__","tslib__WEBPACK_IMPORTED_MODULE_3__","apollo_client__WEBPACK_IMPORTED_MODULE_4__","lodash_isequal__WEBPACK_IMPORTED_MODULE_5__","lodash_isequal__WEBPACK_IMPORTED_MODULE_5___default","n","ApolloContext","Object","undefined","ApolloConsumer","props","legacyContext","finish","context","client","children","Consumer","contextTypes","isRequired","propTypes","DocumentType","_super","ApolloProvider","_this","call","this","operations","Map","__operations_cache__","prototype","getChildContext","render","Provider","value","childContextTypes","cache","parser","document","variables","type","cached","get","kind","fragments","definitions","filter","x","queries","operation","mutations","subscriptions","length","Mutation","Subscription","definition","variableDefinitions","payload","name","set","getClient","hasOwnProperty","is","y","isObject","obj","shallowEqual","objA","objB","keys","every","key","hasMounted","lastRenderedResult","startQuerySubscription","querySubscription","queryObservable","subscribe","next","result","loading","networkStatus","data","updateCurrentData","error","_error","resubscribeToQuery","removeQuerySubscription","unsubscribe","handleErrorOrCompleted","forceUpdate","currentResult","_a","onCompleted","onError","getQueryResult","observable","create","assign","refetch","bind","fetchMore","updateQuery","startPolling","stopPolling","subscribeToMore","skip","partial","errors","graphQLErrors","fetchPolicy","options","previousData","getLastResult","partialRefetch","oldRefetch_1","args","Promise","r","f","refetcherQueue","resolve","reject","setTimeout","resetQueryStoreErrors","queryManager","queryId","queryStore","networkError","initializeQueryObservable","fetchData","ssr","opts","displayName","watchQuery","renderPromises","registerSSRObservable","componentDidMount","then","catch","componentWillReceiveProps","nextProps","nextContext","resetLastResults","nextClient","query","componentWillUnmount","componentDidUpdate","prevProps","addQueryPromise","extractOptsFromProps","metadata","reactComponent","setOperations","getSSRObservable","setOptions","lastError","getLastError","lastResult","notifyOnNetworkStatusChange","pollInterval","returnPartialData","initialState","called","runMutation","onMutationStart","mutationId","generateNewMutationId","mutate","response","onMutationCompleted","e","onMutationError","mutation","optimisticResponse","update","_b","_c","awaitRefetchQueries","mutateOptions","refetchQueries","Array","isArray","map","mutateVariables","state","ignoreResults","setState","callOncomplete","isMostRecentMutation","callOnError","mostRecentMutationId","verifyDocumentIsMutation","initialize","subscription","startSubscription","updateError","complete","completeSubscription","getInitialState","onSubscriptionData","subscriptionData","onSubscriptionComplete","endSubscription","shouldResubscribe","shouldNotResubscribe","renderFn","GraphQLBase","withRef","setWrappedInstance","getWrappedInstance","wrappedInstance","ref","RenderPromises","queryPromises","queryInfoTrie","queryInstance","lookupQueryInfo","seen","hasPromises","size","consumeAndAwaitPromises","promises","forEach","promise","push","clear","all","varMap","has","variablesString","JSON","stringify","info"],"mappings":"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","file":"static/js/12.56af55ba.chunk.js","sourcesContent":["import { createContext, createElement, Component } from 'react';\nimport { object, func, node, string, bool, number, oneOfType, arrayOf, any } from 'prop-types';\nimport { InvariantError, invariant } from 'ts-invariant';\nimport { __extends, __assign, __rest } from 'tslib';\nimport { ApolloError, NetworkStatus } from 'apollo-client';\nimport isEqual from 'lodash.isequal';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nvar ApolloContext = createContext && createContext(undefined);\n\nvar ApolloConsumer = function ApolloConsumer(props, legacyContext) {\n  function finish(context) {\n    if (!context || !context.client) {\n      throw process.env.NODE_ENV === \"production\" ? new InvariantError() : new InvariantError('Could not find \"client\" in the context of ApolloConsumer. ' + 'Wrap the root component in an <ApolloProvider>.');\n    }\n\n    return props.children(context.client);\n  }\n\n  return ApolloContext ? createElement(ApolloContext.Consumer, null, finish) : finish(legacyContext);\n};\n\nApolloConsumer.contextTypes = {\n  client: object.isRequired\n};\nApolloConsumer.propTypes = {\n  children: func.isRequired\n};\n\nvar ApolloProvider = function (_super) {\n  __extends(ApolloProvider, _super);\n\n  function ApolloProvider(props, context) {\n    var _this = _super.call(this, props, context) || this;\n\n    _this.operations = new Map();\n    process.env.NODE_ENV === \"production\" ? invariant(props.client) : invariant(props.client, 'ApolloProvider was not passed a client instance. Make ' + 'sure you pass in your client via the \"client\" prop.');\n\n    if (!props.client.__operations_cache__) {\n      props.client.__operations_cache__ = _this.operations;\n    }\n\n    return _this;\n  }\n\n  ApolloProvider.prototype.getChildContext = function () {\n    return {\n      client: this.props.client,\n      operations: this.props.client.__operations_cache__\n    };\n  };\n\n  ApolloProvider.prototype.render = function () {\n    return ApolloContext ? createElement(ApolloContext.Provider, {\n      value: this.getChildContext()\n    }, this.props.children) : this.props.children;\n  };\n\n  ApolloProvider.propTypes = {\n    client: object.isRequired,\n    children: node.isRequired\n  };\n  ApolloProvider.childContextTypes = {\n    client: object.isRequired,\n    operations: object\n  };\n  return ApolloProvider;\n}(Component);\n\nvar DocumentType;\n\n(function (DocumentType) {\n  DocumentType[DocumentType[\"Query\"] = 0] = \"Query\";\n  DocumentType[DocumentType[\"Mutation\"] = 1] = \"Mutation\";\n  DocumentType[DocumentType[\"Subscription\"] = 2] = \"Subscription\";\n})(DocumentType || (DocumentType = {}));\n\nvar cache = new Map();\n\nfunction parser(document) {\n  var cached = cache.get(document);\n  if (cached) return cached;\n  var variables, type, name;\n  process.env.NODE_ENV === \"production\" ? invariant(!!document && !!document.kind) : invariant(!!document && !!document.kind, \"Argument of \" + document + \" passed to parser was not a valid GraphQL \" + \"DocumentNode. You may need to use 'graphql-tag' or another method \" + \"to convert your operation into a document\");\n  var fragments = document.definitions.filter(function (x) {\n    return x.kind === 'FragmentDefinition';\n  });\n  var queries = document.definitions.filter(function (x) {\n    return x.kind === 'OperationDefinition' && x.operation === 'query';\n  });\n  var mutations = document.definitions.filter(function (x) {\n    return x.kind === 'OperationDefinition' && x.operation === 'mutation';\n  });\n  var subscriptions = document.definitions.filter(function (x) {\n    return x.kind === 'OperationDefinition' && x.operation === 'subscription';\n  });\n  process.env.NODE_ENV === \"production\" ? invariant(!fragments.length || queries.length || mutations.length || subscriptions.length) : invariant(!fragments.length || queries.length || mutations.length || subscriptions.length, \"Passing only a fragment to 'graphql' is not yet supported. \" + \"You must include a query, subscription or mutation as well\");\n  process.env.NODE_ENV === \"production\" ? invariant(queries.length + mutations.length + subscriptions.length <= 1) : invariant(queries.length + mutations.length + subscriptions.length <= 1, \"react-apollo only supports a query, subscription, or a mutation per HOC. \" + (document + \" had \" + queries.length + \" queries, \" + subscriptions.length + \" \") + (\"subscriptions and \" + mutations.length + \" mutations. \") + \"You can use 'compose' to join multiple operation types to a component\");\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n  var definitions = queries.length ? queries : mutations.length ? mutations : subscriptions;\n  process.env.NODE_ENV === \"production\" ? invariant(definitions.length === 1) : invariant(definitions.length === 1, \"react-apollo only supports one definition per HOC. \" + document + \" had \" + (definitions.length + \" definitions. \") + \"You can use 'compose' to join multiple operation types to a component\");\n  var definition = definitions[0];\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data';\n  }\n\n  var payload = {\n    name: name,\n    type: type,\n    variables: variables\n  };\n  cache.set(document, payload);\n  return payload;\n}\n\nfunction getClient(props, context) {\n  var client = props.client || context.client;\n  process.env.NODE_ENV === \"production\" ? invariant(!!client) : invariant(!!client, 'Could not find \"client\" in the context or passed in as a prop. ' + 'Wrap the root component in an <ApolloProvider>, or pass an ' + 'ApolloClient instance in via props.');\n  return client;\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction is(x, y) {\n  if (x === y) {\n    return x !== 0 || y !== 0 || 1 / x === 1 / y;\n  }\n\n  return x !== x && y !== y;\n}\n\nfunction isObject(obj) {\n  return obj !== null && typeof obj === \"object\";\n}\n\nfunction shallowEqual(objA, objB) {\n  if (is(objA, objB)) {\n    return true;\n  }\n\n  if (!isObject(objA) || !isObject(objB)) {\n    return false;\n  }\n\n  var keys = Object.keys(objA);\n\n  if (keys.length !== Object.keys(objB).length) {\n    return false;\n  }\n\n  return keys.every(function (key) {\n    return hasOwnProperty.call(objB, key) && is(objA[key], objB[key]);\n  });\n}\n\nfunction observableQueryFields(observable) {\n  var fields = {\n    variables: observable.variables,\n    refetch: observable.refetch.bind(observable),\n    fetchMore: observable.fetchMore.bind(observable),\n    updateQuery: observable.updateQuery.bind(observable),\n    startPolling: observable.startPolling.bind(observable),\n    stopPolling: observable.stopPolling.bind(observable),\n    subscribeToMore: observable.subscribeToMore.bind(observable)\n  };\n  return fields;\n}\n\nvar Query = function (_super) {\n  __extends(Query, _super);\n\n  function Query(props, context) {\n    var _this = _super.call(this, props, context) || this;\n\n    _this.hasMounted = false;\n    _this.lastRenderedResult = null;\n\n    _this.startQuerySubscription = function () {\n      if (_this.querySubscription) return;\n      _this.querySubscription = _this.queryObservable.subscribe({\n        next: function next(result) {\n          if (_this.lastRenderedResult && _this.lastRenderedResult.loading === result.loading && _this.lastRenderedResult.networkStatus === result.networkStatus && shallowEqual(_this.lastRenderedResult.data, result.data)) {\n            return;\n          }\n\n          _this.updateCurrentData();\n        },\n        error: function error(_error) {\n          _this.resubscribeToQuery();\n\n          if (!_error.hasOwnProperty('graphQLErrors')) throw _error;\n\n          _this.updateCurrentData();\n        }\n      });\n    };\n\n    _this.removeQuerySubscription = function () {\n      if (_this.querySubscription) {\n        _this.querySubscription.unsubscribe();\n\n        delete _this.lastRenderedResult;\n        delete _this.querySubscription;\n      }\n    };\n\n    _this.updateCurrentData = function () {\n      _this.handleErrorOrCompleted();\n\n      if (_this.hasMounted) _this.forceUpdate();\n    };\n\n    _this.handleErrorOrCompleted = function () {\n      var result = _this.queryObservable.currentResult();\n\n      var data = result.data,\n          loading = result.loading,\n          error = result.error;\n      var _a = _this.props,\n          onCompleted = _a.onCompleted,\n          onError = _a.onError;\n\n      if (onCompleted && !loading && !error) {\n        onCompleted(data);\n      } else if (onError && !loading && error) {\n        onError(error);\n      }\n    };\n\n    _this.getQueryResult = function () {\n      var result = {\n        data: Object.create(null)\n      };\n      Object.assign(result, observableQueryFields(_this.queryObservable));\n\n      if (_this.props.skip) {\n        result = __assign({}, result, {\n          data: undefined,\n          error: undefined,\n          loading: false\n        });\n      } else {\n        var currentResult = _this.queryObservable.currentResult();\n\n        var loading = currentResult.loading,\n            partial = currentResult.partial,\n            networkStatus = currentResult.networkStatus,\n            errors = currentResult.errors;\n        var error = currentResult.error;\n\n        if (errors && errors.length > 0) {\n          error = new ApolloError({\n            graphQLErrors: errors\n          });\n        }\n\n        var fetchPolicy = _this.queryObservable.options.fetchPolicy;\n        Object.assign(result, {\n          loading: loading,\n          networkStatus: networkStatus,\n          error: error\n        });\n        var previousData = _this.lastRenderedResult ? _this.lastRenderedResult.data : {};\n\n        if (loading) {\n          Object.assign(result.data, previousData, currentResult.data);\n        } else if (error) {\n          Object.assign(result, {\n            data: (_this.queryObservable.getLastResult() || {}).data\n          });\n        } else if (fetchPolicy === 'no-cache' && Object.keys(currentResult.data).length === 0) {\n          result.data = previousData;\n        } else {\n          var partialRefetch = _this.props.partialRefetch;\n\n          if (partialRefetch && currentResult.data !== null && typeof currentResult.data === 'object' && Object.keys(currentResult.data).length === 0 && partial && fetchPolicy !== 'cache-only') {\n            Object.assign(result, {\n              loading: true,\n              networkStatus: NetworkStatus.loading\n            });\n            result.refetch();\n            _this.lastRenderedResult = result;\n            return result;\n          }\n\n          Object.assign(result.data, currentResult.data);\n        }\n      }\n\n      if (!_this.querySubscription) {\n        var oldRefetch_1 = result.refetch;\n\n        result.refetch = function (args) {\n          if (_this.querySubscription) {\n            return oldRefetch_1(args);\n          } else {\n            return new Promise(function (r, f) {\n              _this.refetcherQueue = {\n                resolve: r,\n                reject: f,\n                args: args\n              };\n            });\n          }\n        };\n      }\n\n      setTimeout(function () {\n        if (_this.queryObservable.resetQueryStoreErrors) {\n          _this.queryObservable.resetQueryStoreErrors();\n        } else {\n          var _a = _this.queryObservable,\n              queryManager = _a.queryManager,\n              queryId = _a.queryId;\n          var queryStore = queryManager.queryStore.get(queryId);\n\n          if (queryStore) {\n            queryStore.networkError = null;\n            queryStore.graphQLErrors = [];\n          }\n        }\n      });\n      result.client = _this.client;\n      _this.lastRenderedResult = result;\n      return result;\n    };\n\n    _this.client = getClient(props, context);\n\n    _this.initializeQueryObservable(props);\n\n    return _this;\n  }\n\n  Query.prototype.fetchData = function () {\n    if (this.props.skip) return false;\n\n    var _a = this.props,\n        children = _a.children,\n        ssr = _a.ssr,\n        displayName = _a.displayName,\n        skip = _a.skip,\n        client = _a.client,\n        onCompleted = _a.onCompleted,\n        onError = _a.onError,\n        partialRefetch = _a.partialRefetch,\n        opts = __rest(_a, [\"children\", \"ssr\", \"displayName\", \"skip\", \"client\", \"onCompleted\", \"onError\", \"partialRefetch\"]);\n\n    var fetchPolicy = opts.fetchPolicy;\n    if (ssr === false) return false;\n\n    if (fetchPolicy === 'network-only' || fetchPolicy === 'cache-and-network') {\n      fetchPolicy = 'cache-first';\n    }\n\n    var observable = this.client.watchQuery(__assign({}, opts, {\n      fetchPolicy: fetchPolicy\n    }));\n\n    if (this.context && this.context.renderPromises) {\n      this.context.renderPromises.registerSSRObservable(this, observable);\n    }\n\n    var result = this.queryObservable.currentResult();\n    return result.loading ? observable.result() : false;\n  };\n\n  Query.prototype.componentDidMount = function () {\n    this.hasMounted = true;\n    if (this.props.skip) return;\n    this.startQuerySubscription();\n\n    if (this.refetcherQueue) {\n      var _a = this.refetcherQueue,\n          args = _a.args,\n          resolve = _a.resolve,\n          reject = _a.reject;\n      this.queryObservable.refetch(args).then(resolve).catch(reject);\n    }\n  };\n\n  Query.prototype.componentWillReceiveProps = function (nextProps, nextContext) {\n    if (nextProps.skip && !this.props.skip) {\n      this.queryObservable.resetLastResults();\n      this.removeQuerySubscription();\n      return;\n    }\n\n    var nextClient = getClient(nextProps, nextContext);\n\n    if (shallowEqual(this.props, nextProps) && this.client === nextClient) {\n      return;\n    }\n\n    if (this.client !== nextClient) {\n      this.client = nextClient;\n      this.removeQuerySubscription();\n      this.queryObservable = null;\n    }\n\n    if (this.props.query !== nextProps.query) {\n      this.queryObservable.resetLastResults();\n      this.removeQuerySubscription();\n    }\n\n    this.updateQuery(nextProps);\n    if (nextProps.skip) return;\n    this.startQuerySubscription();\n  };\n\n  Query.prototype.componentWillUnmount = function () {\n    this.removeQuerySubscription();\n    this.hasMounted = false;\n  };\n\n  Query.prototype.componentDidUpdate = function (prevProps) {\n    var isDiffRequest = !isEqual(prevProps.query, this.props.query) || !isEqual(prevProps.variables, this.props.variables);\n\n    if (isDiffRequest) {\n      this.handleErrorOrCompleted();\n    }\n  };\n\n  Query.prototype.render = function () {\n    var _this = this;\n\n    var context = this.context;\n\n    var finish = function finish() {\n      return _this.props.children(_this.getQueryResult());\n    };\n\n    if (context && context.renderPromises) {\n      return context.renderPromises.addQueryPromise(this, finish);\n    }\n\n    return finish();\n  };\n\n  Query.prototype.extractOptsFromProps = function (props) {\n    this.operation = parser(props.query);\n    process.env.NODE_ENV === \"production\" ? invariant(this.operation.type === DocumentType.Query) : invariant(this.operation.type === DocumentType.Query, \"The <Query /> component requires a graphql query, but got a \" + (this.operation.type === DocumentType.Mutation ? 'mutation' : 'subscription') + \".\");\n    var displayName = props.displayName || 'Query';\n    return __assign({}, props, {\n      displayName: displayName,\n      context: props.context || {},\n      metadata: {\n        reactComponent: {\n          displayName: displayName\n        }\n      }\n    });\n  };\n\n  Query.prototype.initializeQueryObservable = function (props) {\n    var opts = this.extractOptsFromProps(props);\n    this.setOperations(opts);\n\n    if (this.context && this.context.renderPromises) {\n      this.queryObservable = this.context.renderPromises.getSSRObservable(this);\n    }\n\n    if (!this.queryObservable) {\n      this.queryObservable = this.client.watchQuery(opts);\n    }\n  };\n\n  Query.prototype.setOperations = function (props) {\n    if (this.context.operations) {\n      this.context.operations.set(this.operation.name, {\n        query: props.query,\n        variables: props.variables\n      });\n    }\n  };\n\n  Query.prototype.updateQuery = function (props) {\n    if (!this.queryObservable) {\n      this.initializeQueryObservable(props);\n    } else {\n      this.setOperations(props);\n    }\n\n    this.queryObservable.setOptions(this.extractOptsFromProps(props)).catch(function () {\n      return null;\n    });\n  };\n\n  Query.prototype.resubscribeToQuery = function () {\n    this.removeQuerySubscription();\n    var lastError = this.queryObservable.getLastError();\n    var lastResult = this.queryObservable.getLastResult();\n    this.queryObservable.resetLastResults();\n    this.startQuerySubscription();\n    Object.assign(this.queryObservable, {\n      lastError: lastError,\n      lastResult: lastResult\n    });\n  };\n\n  Query.contextTypes = {\n    client: object,\n    operations: object,\n    renderPromises: object\n  };\n  Query.propTypes = {\n    client: object,\n    children: func.isRequired,\n    fetchPolicy: string,\n    notifyOnNetworkStatusChange: bool,\n    onCompleted: func,\n    onError: func,\n    pollInterval: number,\n    query: object.isRequired,\n    variables: object,\n    ssr: bool,\n    partialRefetch: bool,\n    returnPartialData: bool\n  };\n  return Query;\n}(Component);\n\nvar initialState = {\n  loading: false,\n  called: false,\n  error: undefined,\n  data: undefined\n};\n\nvar Mutation = function (_super) {\n  __extends(Mutation, _super);\n\n  function Mutation(props, context) {\n    var _this = _super.call(this, props, context) || this;\n\n    _this.hasMounted = false;\n\n    _this.runMutation = function (options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      _this.onMutationStart();\n\n      var mutationId = _this.generateNewMutationId();\n\n      return _this.mutate(options).then(function (response) {\n        _this.onMutationCompleted(response, mutationId);\n\n        return response;\n      }).catch(function (e) {\n        _this.onMutationError(e, mutationId);\n\n        if (!_this.props.onError) throw e;\n      });\n    };\n\n    _this.mutate = function (options) {\n      var _a = _this.props,\n          mutation = _a.mutation,\n          variables = _a.variables,\n          optimisticResponse = _a.optimisticResponse,\n          update = _a.update,\n          _b = _a.context,\n          context = _b === void 0 ? {} : _b,\n          _c = _a.awaitRefetchQueries,\n          awaitRefetchQueries = _c === void 0 ? false : _c,\n          fetchPolicy = _a.fetchPolicy;\n\n      var mutateOptions = __assign({}, options);\n\n      var refetchQueries = mutateOptions.refetchQueries || _this.props.refetchQueries;\n\n      if (refetchQueries && refetchQueries.length && Array.isArray(refetchQueries)) {\n        refetchQueries = refetchQueries.map(function (x) {\n          if (typeof x === 'string' && _this.context.operations) return _this.context.operations.get(x) || x;\n          return x;\n        });\n        delete mutateOptions.refetchQueries;\n      }\n\n      var mutateVariables = Object.assign({}, variables, mutateOptions.variables);\n      delete mutateOptions.variables;\n      return _this.client.mutate(__assign({\n        mutation: mutation,\n        optimisticResponse: optimisticResponse,\n        refetchQueries: refetchQueries,\n        awaitRefetchQueries: awaitRefetchQueries,\n        update: update,\n        context: context,\n        fetchPolicy: fetchPolicy,\n        variables: mutateVariables\n      }, mutateOptions));\n    };\n\n    _this.onMutationStart = function () {\n      if (!_this.state.loading && !_this.props.ignoreResults) {\n        _this.setState({\n          loading: true,\n          error: undefined,\n          data: undefined,\n          called: true\n        });\n      }\n    };\n\n    _this.onMutationCompleted = function (response, mutationId) {\n      var _a = _this.props,\n          onCompleted = _a.onCompleted,\n          ignoreResults = _a.ignoreResults;\n      var data = response.data,\n          errors = response.errors;\n      var error = errors && errors.length > 0 ? new ApolloError({\n        graphQLErrors: errors\n      }) : undefined;\n\n      var callOncomplete = function callOncomplete() {\n        return onCompleted ? onCompleted(data) : null;\n      };\n\n      if (_this.hasMounted && _this.isMostRecentMutation(mutationId) && !ignoreResults) {\n        _this.setState({\n          loading: false,\n          data: data,\n          error: error\n        }, callOncomplete);\n      } else {\n        callOncomplete();\n      }\n    };\n\n    _this.onMutationError = function (error, mutationId) {\n      var onError = _this.props.onError;\n\n      var callOnError = function callOnError() {\n        return onError ? onError(error) : null;\n      };\n\n      if (_this.hasMounted && _this.isMostRecentMutation(mutationId)) {\n        _this.setState({\n          loading: false,\n          error: error\n        }, callOnError);\n      } else {\n        callOnError();\n      }\n    };\n\n    _this.generateNewMutationId = function () {\n      _this.mostRecentMutationId = _this.mostRecentMutationId + 1;\n      return _this.mostRecentMutationId;\n    };\n\n    _this.isMostRecentMutation = function (mutationId) {\n      return _this.mostRecentMutationId === mutationId;\n    };\n\n    _this.verifyDocumentIsMutation = function (mutation) {\n      var operation = parser(mutation);\n      process.env.NODE_ENV === \"production\" ? invariant(operation.type === DocumentType.Mutation) : invariant(operation.type === DocumentType.Mutation, \"The <Mutation /> component requires a graphql mutation, but got a \" + (operation.type === DocumentType.Query ? 'query' : 'subscription') + \".\");\n    };\n\n    _this.client = getClient(props, context);\n\n    _this.verifyDocumentIsMutation(props.mutation);\n\n    _this.mostRecentMutationId = 0;\n    _this.state = initialState;\n    return _this;\n  }\n\n  Mutation.prototype.componentDidMount = function () {\n    this.hasMounted = true;\n  };\n\n  Mutation.prototype.componentWillUnmount = function () {\n    this.hasMounted = false;\n  };\n\n  Mutation.prototype.componentWillReceiveProps = function (nextProps, nextContext) {\n    var nextClient = getClient(nextProps, nextContext);\n\n    if (shallowEqual(this.props, nextProps) && this.client === nextClient) {\n      return;\n    }\n\n    if (this.props.mutation !== nextProps.mutation) {\n      this.verifyDocumentIsMutation(nextProps.mutation);\n    }\n\n    if (this.client !== nextClient) {\n      this.client = nextClient;\n      this.setState(initialState);\n    }\n  };\n\n  Mutation.prototype.render = function () {\n    var children = this.props.children;\n    var _a = this.state,\n        loading = _a.loading,\n        data = _a.data,\n        error = _a.error,\n        called = _a.called;\n    var result = {\n      called: called,\n      loading: loading,\n      data: data,\n      error: error,\n      client: this.client\n    };\n    return children(this.runMutation, result);\n  };\n\n  Mutation.contextTypes = {\n    client: object,\n    operations: object\n  };\n  Mutation.propTypes = {\n    mutation: object.isRequired,\n    variables: object,\n    optimisticResponse: object,\n    refetchQueries: oneOfType([arrayOf(oneOfType([string, object])), func]),\n    awaitRefetchQueries: bool,\n    update: func,\n    children: func.isRequired,\n    onCompleted: func,\n    onError: func,\n    fetchPolicy: string\n  };\n  return Mutation;\n}(Component);\n\nvar Subscription = function (_super) {\n  __extends(Subscription, _super);\n\n  function Subscription(props, context) {\n    var _this = _super.call(this, props, context) || this;\n\n    _this.initialize = function (props) {\n      if (_this.queryObservable) return;\n      _this.queryObservable = _this.client.subscribe({\n        query: props.subscription,\n        variables: props.variables,\n        fetchPolicy: props.fetchPolicy\n      });\n    };\n\n    _this.startSubscription = function () {\n      if (_this.querySubscription) return;\n      _this.querySubscription = _this.queryObservable.subscribe({\n        next: _this.updateCurrentData,\n        error: _this.updateError,\n        complete: _this.completeSubscription\n      });\n    };\n\n    _this.getInitialState = function () {\n      return {\n        loading: true,\n        error: undefined,\n        data: undefined\n      };\n    };\n\n    _this.updateCurrentData = function (result) {\n      var _a = _this,\n          client = _a.client,\n          onSubscriptionData = _a.props.onSubscriptionData;\n\n      _this.setState({\n        data: result.data,\n        loading: false,\n        error: undefined\n      });\n\n      if (onSubscriptionData) onSubscriptionData({\n        client: client,\n        subscriptionData: result\n      });\n    };\n\n    _this.updateError = function (error) {\n      _this.setState({\n        error: error,\n        loading: false\n      });\n    };\n\n    _this.completeSubscription = function () {\n      var onSubscriptionComplete = _this.props.onSubscriptionComplete;\n      if (onSubscriptionComplete) onSubscriptionComplete();\n\n      _this.endSubscription();\n    };\n\n    _this.endSubscription = function () {\n      if (_this.querySubscription) {\n        _this.querySubscription.unsubscribe();\n\n        delete _this.querySubscription;\n      }\n    };\n\n    _this.client = getClient(props, context);\n\n    _this.initialize(props);\n\n    _this.state = _this.getInitialState();\n    return _this;\n  }\n\n  Subscription.prototype.componentDidMount = function () {\n    this.startSubscription();\n  };\n\n  Subscription.prototype.componentWillReceiveProps = function (nextProps, nextContext) {\n    var nextClient = getClient(nextProps, nextContext);\n\n    if (shallowEqual(this.props.variables, nextProps.variables) && this.client === nextClient && this.props.subscription === nextProps.subscription) {\n      return;\n    }\n\n    var shouldResubscribe = nextProps.shouldResubscribe;\n\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.props, nextProps);\n    }\n\n    var shouldNotResubscribe = shouldResubscribe === false;\n\n    if (this.client !== nextClient) {\n      this.client = nextClient;\n    }\n\n    if (!shouldNotResubscribe) {\n      this.endSubscription();\n      delete this.queryObservable;\n      this.initialize(nextProps);\n      this.startSubscription();\n      this.setState(this.getInitialState());\n      return;\n    }\n\n    this.initialize(nextProps);\n    this.startSubscription();\n  };\n\n  Subscription.prototype.componentWillUnmount = function () {\n    this.endSubscription();\n  };\n\n  Subscription.prototype.render = function () {\n    var renderFn = this.props.children;\n    if (!renderFn) return null;\n    var result = Object.assign({}, this.state, {\n      variables: this.props.variables\n    });\n    return renderFn(result);\n  };\n\n  Subscription.contextTypes = {\n    client: object\n  };\n  Subscription.propTypes = {\n    subscription: object.isRequired,\n    variables: object,\n    children: func,\n    onSubscriptionData: func,\n    onSubscriptionComplete: func,\n    shouldResubscribe: oneOfType([func, bool])\n  };\n  return Subscription;\n}(Component);\n\nvar defaultMapPropsToOptions = function defaultMapPropsToOptions() {\n  return {};\n};\n\nvar defaultMapPropsToSkip = function defaultMapPropsToSkip() {\n  return false;\n};\n\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n\nfunction calculateVariablesFromProps(operation, props) {\n  var variables = {};\n\n  for (var _i = 0, _a = operation.variables; _i < _a.length; _i++) {\n    var _b = _a[_i],\n        variable = _b.variable,\n        type = _b.type;\n    if (!variable.name || !variable.name.value) continue;\n    var variableName = variable.name.value;\n    var variableProp = props[variableName];\n\n    if (typeof variableProp !== 'undefined') {\n      variables[variableName] = variableProp;\n      continue;\n    }\n\n    if (type.kind !== 'NonNullType') {\n      variables[variableName] = undefined;\n    }\n  }\n\n  return variables;\n}\n\nvar GraphQLBase = function (_super) {\n  __extends(GraphQLBase, _super);\n\n  function GraphQLBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.withRef = false;\n    _this.setWrappedInstance = _this.setWrappedInstance.bind(_this);\n    return _this;\n  }\n\n  GraphQLBase.prototype.getWrappedInstance = function () {\n    process.env.NODE_ENV === \"production\" ? invariant(this.withRef) : invariant(this.withRef, \"To access the wrapped instance, you need to specify \" + \"{ withRef: true } in the options\");\n    return this.wrappedInstance;\n  };\n\n  GraphQLBase.prototype.setWrappedInstance = function (ref) {\n    this.wrappedInstance = ref;\n  };\n\n  return GraphQLBase;\n}(Component);\n\nfunction withQuery(document, operationOptions) {\n  if (operationOptions === void 0) {\n    operationOptions = {};\n  }\n\n  var operation = parser(document);\n  var _a = operationOptions.options,\n      options = _a === void 0 ? defaultMapPropsToOptions : _a,\n      _b = operationOptions.skip,\n      skip = _b === void 0 ? defaultMapPropsToSkip : _b,\n      _c = operationOptions.alias,\n      alias = _c === void 0 ? 'Apollo' : _c;\n  var mapPropsToOptions = options;\n\n  if (typeof mapPropsToOptions !== 'function') {\n    mapPropsToOptions = function mapPropsToOptions() {\n      return options;\n    };\n  }\n\n  var mapPropsToSkip = skip;\n\n  if (typeof mapPropsToSkip !== 'function') {\n    mapPropsToSkip = function mapPropsToSkip() {\n      return skip;\n    };\n  }\n\n  var lastResultProps;\n  return function (WrappedComponent) {\n    var graphQLDisplayName = alias + \"(\" + getDisplayName(WrappedComponent) + \")\";\n\n    var GraphQL = function (_super) {\n      __extends(GraphQL, _super);\n\n      function GraphQL() {\n        return _super !== null && _super.apply(this, arguments) || this;\n      }\n\n      GraphQL.prototype.render = function () {\n        var _this = this;\n\n        var props = this.props;\n        var shouldSkip = mapPropsToSkip(props);\n        var opts = shouldSkip ? Object.create(null) : __assign({}, mapPropsToOptions(props));\n\n        if (!shouldSkip && !opts.variables && operation.variables.length > 0) {\n          opts.variables = calculateVariablesFromProps(operation, props);\n        }\n\n        return createElement(Query, __assign({}, opts, {\n          displayName: graphQLDisplayName,\n          skip: shouldSkip,\n          query: document,\n          warnUnhandledError: true\n        }), function (_a) {\n          var _b, _c;\n\n          var _ = _a.client,\n              data = _a.data,\n              r = __rest(_a, [\"client\", \"data\"]);\n\n          if (operationOptions.withRef) {\n            _this.withRef = true;\n            props = Object.assign({}, props, {\n              ref: _this.setWrappedInstance\n            });\n          }\n\n          if (shouldSkip) {\n            return createElement(WrappedComponent, __assign({}, props, {}));\n          }\n\n          var result = Object.assign(r, data || {});\n          var name = operationOptions.name || 'data';\n          var childProps = (_b = {}, _b[name] = result, _b);\n\n          if (operationOptions.props) {\n            var newResult = (_c = {}, _c[name] = result, _c.ownProps = props, _c);\n            lastResultProps = operationOptions.props(newResult, lastResultProps);\n            childProps = lastResultProps;\n          }\n\n          return createElement(WrappedComponent, __assign({}, props, childProps));\n        });\n      };\n\n      GraphQL.displayName = graphQLDisplayName;\n      GraphQL.WrappedComponent = WrappedComponent;\n      return GraphQL;\n    }(GraphQLBase);\n\n    return hoistNonReactStatics(GraphQL, WrappedComponent, {});\n  };\n}\n\nfunction withMutation(document, operationOptions) {\n  if (operationOptions === void 0) {\n    operationOptions = {};\n  }\n\n  var operation = parser(document);\n  var _a = operationOptions.options,\n      options = _a === void 0 ? defaultMapPropsToOptions : _a,\n      _b = operationOptions.alias,\n      alias = _b === void 0 ? 'Apollo' : _b;\n  var mapPropsToOptions = options;\n  if (typeof mapPropsToOptions !== 'function') mapPropsToOptions = function mapPropsToOptions() {\n    return options;\n  };\n  return function (WrappedComponent) {\n    var graphQLDisplayName = alias + \"(\" + getDisplayName(WrappedComponent) + \")\";\n\n    var GraphQL = function (_super) {\n      __extends(GraphQL, _super);\n\n      function GraphQL() {\n        return _super !== null && _super.apply(this, arguments) || this;\n      }\n\n      GraphQL.prototype.render = function () {\n        var props = this.props;\n        var opts = mapPropsToOptions(props);\n\n        if (operationOptions.withRef) {\n          this.withRef = true;\n          props = Object.assign({}, props, {\n            ref: this.setWrappedInstance\n          });\n        }\n\n        if (!opts.variables && operation.variables.length > 0) {\n          opts.variables = calculateVariablesFromProps(operation, props);\n        }\n\n        return createElement(Mutation, __assign({}, opts, {\n          mutation: document,\n          ignoreResults: true\n        }), function (mutate, _a) {\n          var _b, _c;\n\n          var data = _a.data,\n              r = __rest(_a, [\"data\"]);\n\n          var result = Object.assign(r, data || {});\n          var name = operationOptions.name || 'mutate';\n          var resultName = operationOptions.name ? name + \"Result\" : 'result';\n          var childProps = (_b = {}, _b[name] = mutate, _b[resultName] = result, _b);\n\n          if (operationOptions.props) {\n            var newResult = (_c = {}, _c[name] = mutate, _c[resultName] = result, _c.ownProps = props, _c);\n            childProps = operationOptions.props(newResult);\n          }\n\n          return createElement(WrappedComponent, __assign({}, props, childProps));\n        });\n      };\n\n      GraphQL.displayName = graphQLDisplayName;\n      GraphQL.WrappedComponent = WrappedComponent;\n      return GraphQL;\n    }(GraphQLBase);\n\n    return hoistNonReactStatics(GraphQL, WrappedComponent, {});\n  };\n}\n\nfunction withSubscription(document, operationOptions) {\n  if (operationOptions === void 0) {\n    operationOptions = {};\n  }\n\n  var operation = parser(document);\n  var _a = operationOptions.options,\n      options = _a === void 0 ? defaultMapPropsToOptions : _a,\n      _b = operationOptions.skip,\n      skip = _b === void 0 ? defaultMapPropsToSkip : _b,\n      _c = operationOptions.alias,\n      alias = _c === void 0 ? 'Apollo' : _c,\n      shouldResubscribe = operationOptions.shouldResubscribe;\n  var mapPropsToOptions = options;\n  if (typeof mapPropsToOptions !== 'function') mapPropsToOptions = function mapPropsToOptions() {\n    return options;\n  };\n  var mapPropsToSkip = skip;\n  if (typeof mapPropsToSkip !== 'function') mapPropsToSkip = function mapPropsToSkip() {\n    return skip;\n  };\n  var lastResultProps;\n  return function (WrappedComponent) {\n    var graphQLDisplayName = alias + \"(\" + getDisplayName(WrappedComponent) + \")\";\n\n    var GraphQL = function (_super) {\n      __extends(GraphQL, _super);\n\n      function GraphQL(props) {\n        var _this = _super.call(this, props) || this;\n\n        _this.state = {\n          resubscribe: false\n        };\n        return _this;\n      }\n\n      GraphQL.prototype.componentWillReceiveProps = function (nextProps) {\n        if (!shouldResubscribe) return;\n        this.setState({\n          resubscribe: shouldResubscribe(this.props, nextProps)\n        });\n      };\n\n      GraphQL.prototype.render = function () {\n        var _this = this;\n\n        var props = this.props;\n        var shouldSkip = mapPropsToSkip(props);\n        var opts = shouldSkip ? Object.create(null) : mapPropsToOptions(props);\n\n        if (!shouldSkip && !opts.variables && operation.variables.length > 0) {\n          opts.variables = calculateVariablesFromProps(operation, props);\n        }\n\n        return createElement(Subscription, __assign({}, opts, {\n          displayName: graphQLDisplayName,\n          skip: shouldSkip,\n          subscription: document,\n          shouldResubscribe: this.state.resubscribe\n        }), function (_a) {\n          var _b, _c;\n\n          var data = _a.data,\n              r = __rest(_a, [\"data\"]);\n\n          if (operationOptions.withRef) {\n            _this.withRef = true;\n            props = Object.assign({}, props, {\n              ref: _this.setWrappedInstance\n            });\n          }\n\n          if (shouldSkip) {\n            return createElement(WrappedComponent, __assign({}, props, {}));\n          }\n\n          var result = Object.assign(r, data || {});\n          var name = operationOptions.name || 'data';\n          var childProps = (_b = {}, _b[name] = result, _b);\n\n          if (operationOptions.props) {\n            var newResult = (_c = {}, _c[name] = result, _c.ownProps = props, _c);\n            lastResultProps = operationOptions.props(newResult, lastResultProps);\n            childProps = lastResultProps;\n          }\n\n          return createElement(WrappedComponent, __assign({}, props, childProps));\n        });\n      };\n\n      GraphQL.displayName = graphQLDisplayName;\n      GraphQL.WrappedComponent = WrappedComponent;\n      return GraphQL;\n    }(GraphQLBase);\n\n    return hoistNonReactStatics(GraphQL, WrappedComponent, {});\n  };\n}\n\nfunction graphql(document, operationOptions) {\n  if (operationOptions === void 0) {\n    operationOptions = {};\n  }\n\n  switch (parser(document).type) {\n    case DocumentType.Mutation:\n      return withMutation(document, operationOptions);\n\n    case DocumentType.Subscription:\n      return withSubscription(document, operationOptions);\n\n    case DocumentType.Query:\n    default:\n      return withQuery(document, operationOptions);\n  }\n}\n\nfunction getDisplayName$1(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n\nfunction withApollo(WrappedComponent, operationOptions) {\n  if (operationOptions === void 0) {\n    operationOptions = {};\n  }\n\n  var withDisplayName = \"withApollo(\" + getDisplayName$1(WrappedComponent) + \")\";\n\n  var WithApollo = function (_super) {\n    __extends(WithApollo, _super);\n\n    function WithApollo(props) {\n      var _this = _super.call(this, props) || this;\n\n      _this.setWrappedInstance = _this.setWrappedInstance.bind(_this);\n      return _this;\n    }\n\n    WithApollo.prototype.getWrappedInstance = function () {\n      process.env.NODE_ENV === \"production\" ? invariant(operationOptions.withRef) : invariant(operationOptions.withRef, \"To access the wrapped instance, you need to specify \" + \"{ withRef: true } in the options\");\n      return this.wrappedInstance;\n    };\n\n    WithApollo.prototype.setWrappedInstance = function (ref) {\n      this.wrappedInstance = ref;\n    };\n\n    WithApollo.prototype.render = function () {\n      var _this = this;\n\n      return createElement(ApolloConsumer, null, function (client) {\n        var props = Object.assign({}, _this.props, {\n          client: client,\n          ref: operationOptions.withRef ? _this.setWrappedInstance : undefined\n        });\n        return createElement(WrappedComponent, __assign({}, props));\n      });\n    };\n\n    WithApollo.displayName = withDisplayName;\n    WithApollo.WrappedComponent = WrappedComponent;\n    return WithApollo;\n  }(Component);\n\n  return hoistNonReactStatics(WithApollo, WrappedComponent, {});\n}\n\nfunction makeDefaultQueryInfo() {\n  return {\n    seen: false,\n    observable: null\n  };\n}\n\nvar RenderPromises = function () {\n  function RenderPromises() {\n    this.queryPromises = new Map();\n    this.queryInfoTrie = new Map();\n  }\n\n  RenderPromises.prototype.registerSSRObservable = function (queryInstance, observable) {\n    this.lookupQueryInfo(queryInstance).observable = observable;\n  };\n\n  RenderPromises.prototype.getSSRObservable = function (queryInstance) {\n    return this.lookupQueryInfo(queryInstance).observable;\n  };\n\n  RenderPromises.prototype.addQueryPromise = function (queryInstance, finish) {\n    var info = this.lookupQueryInfo(queryInstance);\n\n    if (!info.seen) {\n      this.queryPromises.set(queryInstance, new Promise(function (resolve) {\n        resolve(queryInstance.fetchData());\n      }));\n      return null;\n    }\n\n    return finish();\n  };\n\n  RenderPromises.prototype.hasPromises = function () {\n    return this.queryPromises.size > 0;\n  };\n\n  RenderPromises.prototype.consumeAndAwaitPromises = function () {\n    var _this = this;\n\n    var promises = [];\n    this.queryPromises.forEach(function (promise, queryInstance) {\n      _this.lookupQueryInfo(queryInstance).seen = true;\n      promises.push(promise);\n    });\n    this.queryPromises.clear();\n    return Promise.all(promises);\n  };\n\n  RenderPromises.prototype.lookupQueryInfo = function (queryInstance) {\n    var queryInfoTrie = this.queryInfoTrie;\n    var _a = queryInstance.props,\n        query = _a.query,\n        variables = _a.variables;\n    var varMap = queryInfoTrie.get(query) || new Map();\n    if (!queryInfoTrie.has(query)) queryInfoTrie.set(query, varMap);\n    var variablesString = JSON.stringify(variables);\n    var info = varMap.get(variablesString) || makeDefaultQueryInfo();\n    if (!varMap.has(variablesString)) varMap.set(variablesString, info);\n    return info;\n  };\n\n  return RenderPromises;\n}();\n\nfunction getDataFromTree(tree, context) {\n  if (context === void 0) {\n    context = {};\n  }\n\n  return getMarkupFromTree({\n    tree: tree,\n    context: context,\n    renderFunction: require(\"react-dom/server\").renderToStaticMarkup\n  });\n}\n\nfunction getMarkupFromTree(_a) {\n  var tree = _a.tree,\n      _b = _a.context,\n      context = _b === void 0 ? {} : _b,\n      _c = _a.renderFunction,\n      renderFunction = _c === void 0 ? require(\"react-dom/server\").renderToStaticMarkup : _c;\n  var renderPromises = new RenderPromises();\n\n  var RenderPromisesProvider = function (_super) {\n    __extends(RenderPromisesProvider, _super);\n\n    function RenderPromisesProvider() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n\n    RenderPromisesProvider.prototype.getChildContext = function () {\n      return __assign({}, context, {\n        renderPromises: renderPromises\n      });\n    };\n\n    RenderPromisesProvider.prototype.render = function () {\n      return tree;\n    };\n\n    RenderPromisesProvider.childContextTypes = {\n      renderPromises: object\n    };\n    return RenderPromisesProvider;\n  }(Component);\n\n  Object.keys(context).forEach(function (key) {\n    RenderPromisesProvider.childContextTypes[key] = any;\n  });\n\n  function process() {\n    var html = renderFunction(createElement(RenderPromisesProvider));\n    return renderPromises.hasPromises() ? renderPromises.consumeAndAwaitPromises().then(process) : html;\n  }\n\n  return Promise.resolve().then(process);\n}\n\nfunction renderToStringWithData(component) {\n  return getMarkupFromTree({\n    tree: component,\n    renderFunction: require(\"react-dom/server\").renderToString\n  });\n}\n\nfunction compose() {\n  var funcs = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    funcs[_i] = arguments[_i];\n  }\n\n  var functions = funcs.reverse();\n  return function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var firstFunction = functions[0],\n        restFunctions = functions.slice(1);\n    var result = firstFunction.apply(null, args);\n    restFunctions.forEach(function (fnc) {\n      result = fnc.call(null, result);\n    });\n    return result;\n  };\n}\n\nexport { ApolloConsumer, ApolloContext, ApolloProvider, Mutation, Query, RenderPromises, Subscription, compose, getDataFromTree, getMarkupFromTree, graphql, renderToStringWithData, withApollo, withMutation, withQuery, withSubscription };"],"sourceRoot":""}